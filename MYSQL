# Oracle Documentation and MySQL Documentations
http://docs.oracle.com
================================1. 12 July && 2. 13 July ============================= 
		       
# Database: - Collection of data is known as database. Database is a large amount of data.

# DBMS: - Database Management System
	It’s a readymade s/w that help u to manage your data.

# ANSI Definition: - Collection of Program that allows you to insert, update, delete & process.

# Various DBMS available: -
	MS Excel, dBase, FoxBASE, FoxPro, advanced Revalation, database, Quattro Pro, etc.

# MySQL is a Relational Database Management System.

# DBMS vs RDBMS

DBMS - (e.g.  MS Excel, FoxPro, etc)
-------------------------------------
1. Field
2. Record
3. File
4. Naming convention (Nomenclature) are diff.
5. Relationship between two file is maintained programmatically
6. More Programming
7. More time is required for s/w development
8. High network traffic
9. Processing on Client machine
10. Slow & expensive
11. Client-Server architecture not supported
12. File level locking
13. Not suitable for multi-user
14. Distributed Database are not supported
15. No security of data
16. Security is not in-built feature of DBMS
   (For security, DBMS is dependent on OS)


RDBMS - (example- MySQL, Oracle, etc.)

1. Column, Attributes, Key
2. Row, Tuple, Entity
3. Table, Relation, Entity
4. Naming convention (Nomenclature) are diff.
5. Relationship between 2 tables can be specified at the time of table creation
6. Less programming
7. Less time required for s/w development
8. Low network traffic
9. Processing on server machine
10. Faster (in terms of network traffic) & cheaper (in terms of h/w cost, network cost, infrastructure cost)
11. Most of the RDBMS support Client-Server architecture
12. Row level locking (internally, table is not a file; internally, every row is a file)
13. Suitable for multi-user
14. Most of the RDBMS support Distributed Databases(i.e. Distributed database means for example - consider I have a bank account in Mumbai but if I visit Pune branch bank still I can access the data which is there in Mumbai branch  )
15. Multiple levels of security
	a. Logging in security (example - our Gmail username/password)
	        - (MySQL username/password is needed to logon to the database)
	b. Command level security
	   (example - create table, create function, create procedure, create user, etc)
	c. Object level security
	   (To access the table of other users)
16. Security is in-built feature of RDBMS
           - (for security, RDBMS is not dependent on OS)


IMP NOTE>>
  IN DBMS - Data is stored inside a file and if someone updates 1st row in the file then the whole file becomes read-only for other users
  IN RDBMS - internally, table is not a file; internally, every row is a file

             DEPT
   DEPTNO   DNAME    LOC
    10      trn     mumbai
    20      exp     delhi

                   EMP
    EMPNO     ENAME    SAL     DEPTNO
      1      anil      5000     10
      2      Amit      6000     20

A]  Various RDBMS available:-
1.	Informix (faster in terms of processing speed)

2.	Oracle (most popular -> best s/w development tools)
•	Product of Oracle Corporation (1977)
•	Largest Database s/w company in the world
•	Largest overall s/w company in the world
•	63% of world commercial database market
•	86% of world commercial database market in the Internet environment HIBERNATE
•	Works on 113 Operating Software(OS)

3.	Sybase
•	Sybase Database is Declining day by day 
•	recently acquired by SAP
•	occupies 16% of world commercial database market


4.	MS SQL Server
•	good RDBMS
•	only works with Windows OS 

B]  Open-source free RDBMS:-
1.	character based (text based):-
2.	Ingres
3.	Postgres
4.	Unify

5.	Db Server has to be a mainframe (super computer)
6.	DB2 (good RDBMS from IBM) - HSBC Bank uses DB2

7.	MS Access (part of MS Office)
•	single user RDBMS
                         -- if you want to make database (software) for medicine store or kirana shop this can be used there 
8.	Personal Oracle
•	single user version of Oracle RDBMS
•	free RDBMS

9.	MySQL
•	MySQL was launched by a Swedish company in 1995
•	Its name is a combination of  "My", the name of co-founder Michal widenius' daughter, and "SQL".
•	MySQL is an open-source RDBMS.
•	Most widely used open-source RDBMS. 
-	(MySQL occupies 42% of open-source database market)
-	(MongoDb occupies 20% of open-source database market)
•	MySQL is a part of the widely used LAMP open-source and  web application software stack (i.e other AMP stacks)
•	   Who Uses MySQL?
-	free-software open-source projects that require a RDBMS often use MySQL
•	Companies which use MySQL
-	WordPress, Facebook, Google (but not for searches), Joomla, Twitter, Flickr,
        YouTube, Instagram, WhatsApp, etc.
•	Sun Microsystem acquired MySQL in 2008 and Sun Microsystem also owns Java
•	Oracle Corporation acquired Sun Microsystem in 2010

LAMP = L-Linux, A-Apache Web Server, M-MySQL, P-Perl, Python)
WAMP = W-Windows, A-Apache Web Server, M-MySQL, P-Perl, Python)
MAMP = M-MacOS, A-Apache Web Server, M-MySQL, P-Perl, Python)



================================3. 14 July ============================= 

# Best s/w development tools (make programming very easy):-

SQL (SQL and MySQL are different)
•	SQL full Form- Structure Query Language
•	commonly pronounced as "Sequel"
•	initially founded by IBM (1975-77) and initially known as RQBE (Relational Query by Example)
•	IBM gave RQBE free of cost to ANSI and now controlled by ANSI (hence it is common for all RDBMS)
•	ANSI rename RQBE to SQL in 2005 and the entire source code of SQL rewritten using Java (100%)
•	Create, Drop, Alter, Insert, Update, Delete, Grant, Revoke, Select
•	conform to ANSI standards
     example: - 1 character(char) = 1 Byte, datatypes -> int = 4 Byte, float = 4 Byte, double = 8 Byte, etc.)
•	conforms to ISO standards (for Q.A. [Quality Assurance])
•	All commands are common for all RDBMS
        -    create table command and other commands these all commands  are common for all i.e.        MySQL, Oracle, MS Access and etc.

Products from MySQL-
1.	MYSQL Command Line Client
•	MySQL client s/w
•	Used for running SQL commands, MySQL commands, MySQL - PL Programs
•	Character based (text based) 
•	Interface with database

2.	MySQL Workbench
•	MySQL client s/w
•	Used for running SQL commands, MySQL commands, MySQL - PL Programs
•	GUI based 
•	Interface with database

3.	MySQL - PL
•	MySQL Programming Language
•	programming language from MySQL
•	used for data base programming
      example - HRA_CALC, TAX_CALC, ATTENDANCE_CALC, etc.
4.	MySQL Connectors
5.	MySQL for excel
6.	MySQL Notifier
7.	MySQL Enterprise Backup
8.	MySQL Enterprise High Availability
9.	MySQL Enterprise Encryption
10.	MySQL Enterprise Monitor
11.	MySQL Query Analyzer

# MySQL - SQL
•	Structured Query Language
•	commonly pronounced as "Sequel"
•	common for all RDBMS(hence also known as Standard Query Language)
•	conforms to ANSI standards and ISO standards


There is total 16 commands  but 9 commands are for all RDBMS and rest 7 commands are for Oracle and SQL only
As we know there are only 9 commands in SQL but they are divided into 4- Sub-Division: -
1.	DDL (Data definition Language): - Create, Drop and Alter command
       Create command – this command helps in creating a table. 
                   Example = create employee (it will create a table named as employee)
       Drop command – if want to erase or remove a table we use this command.  
                    Example = drop employee
       Alter command – If we want to add any column or rows in future, we can add them using this command.
This is extra command in DDL only For MySQL: - 
            DDL (Data definition Language): - Rename, Truncate
                    Rename: - It will rename the file.
                    Truncate: - It will delete and commit(save) it.
2.	DML (Data Manipulation Language): - Insert, Update, Delete
        Insert statement– 
NOTE – in INSERT command “row”  is added and in ALTER command “column”  is added 
        Update statement - 
        Delete statement - 
3.	DCL (Data Control Language): - Grant, Revoke
        Grant – If we create a table then its on us if we want to share the data with other users then we will “Grant” them the permission.  
        Revoke – If we share the data with other users but in future, we change our mind that we don’t want to share this data with other users then we will “Revoke”.
4.	DQL (Data Query Language): - Select
        Select Statement – If we want to see the data in our table its known as Query then we will have to write SELECT statement.

This is extra only for MYSQL and Oracle: -   This 5th is not an ANSI standard
5.	DTL/TCL (Data Transaction Language)/(Transaction Control Language) :-  Commit, Rollback,  Savepoint
        Commit: - Suppose we insert a row it is temporary but if we want to make it permanent then we need to use commit command. Commit will save it and make the changes permanent.
        Rollback: - Suppose we insert a row it is temporary but if we change our mind and we don’t want to save we use rollback command.  i.e you can say it is like a save and cancel.
        Savepoint: - 



Extra in Oracle RDBMS only:-
DML (Data Manipulation Language): - Merge, Upsert
   Merge: - It will merge the data of two tables. 
   Upsert: - it is a combination of update and insert.
      Example: - when you upsert a row, if a row already exists then it will update it and if the row doesn’t exist it will insert it

Rules for tablenames, columnnames, variablenames:-
1.	max 30 characters
2.	A-Z, a-z, 0-9
3.	It has to begin with an alphabet. 
        Example = EMP2021, Student is valid 
        but 2021EMP it is not valid bcz First letter is a number 
4.	Special characters $, #, _ allowed
5.	In MySQL, to use reserved characters such as # in tablename and columnname, then enclose it in backquotes [` `] (below esc word in keyboard)
Example - `EMP#`
6.	There are total 134 reserved words not allowed in tablename. Example – create, select, etc.



================================4. 15th July ============================= 



•	SQL provides max 4096 columns per table provide the row size <= 64,535 Bytes
•	SQL has no limit on number of rows per table provided the table size <= 64 Terabytes
MySQL Datatypes: -
1. 
A.	Char: - 
•	char allows any character and could also be alpha-numeric as well. Ex – CDAC1, CDAC2.
•	LIMIT – upper limit max upto 255 characters. (In ORACLE max upto 20000). 
•	Default width is 1. i.e. char(1) by default. 
B.	Varchar 
•	varchar means variable character.
•	varchar allows any character and could also be alpha-numeric as well. Ex – CDAC1, CDAC2
•	LIMIT- upper limit max upto 65,535 characters i.e  64 kb – 1.
•	No default width, and width need to be specified. i.e varchar(5), varchar(7), etc.
C.	Text: -   
•	Text has a variable length.
•	Text allows any character and could also be alpha-numeric as well. Ex – CDAC1, CDAC2.
•	LIMIT- upper limit max upto 65,535 characters i.e., 64 kb – 1.
•	No default width, and width need to be specified.
D.	Tinytext: -
•	Tinytext allows any character and could also be alpha-numeric as well. Ex – CDAC1, CDAC2.
•	LIMIT- upper limit max  upto 255 characters.
•	No default width, and width need to be specified.
E.	Mediumtext: - 
•	Mediumtext  allows any character and could also be alpha-numeric as well. Ex – CDAC1, CDAC2.
•	LIMIT- upper limit max upto 16,777,215 characters i.e 16 Mb – 1.
•	No default width, and width need to be specified.
F.	Longtext: -
•	Longtext allows any character and could also be alpha-numeric as well. Ex – CDAC1, CDAC2.
•	LIMIT- upper limit max upto 4,294,967,295 characters i.e 4 Gb -1.
•	No default width, and width need to be specified.
•	stored outside the row and stored outside the table.
•	MySQL maintains a LOCATOR (hard disk pointer) (stores address) from the table row to the Text data and the benefit is that the processing speed of other columns in the table is not affected.
•	used for those columns are use for storage and display purposes and used for those columns that will not be used for searching.
•	Ex: -  REMARKS, COOMENTS, FEEDBACK, EXPERIENCE, RESUME, etc.

============================

Difference between char and varchar
char	varchar
1.	Char has fixed length.	1.	Varchar has variable length.
2.	Char is wastage of Hard disk space. As if we declare ENAME char(20) and write AMIT it is only 4 Byte but char will occupy all 20 Byte and rest 16 Byte will be blank Spaces.	2.  Varchar converse on HD space
3.	Searching & Retrieval will be very fast.	3. Searching and Retrieval will be slow.
4.	Ex - PANNO, AADHARCARDNO, etc.	4. Ex - ADDRESS, CITY

============================

G.	Binary: - (0, 1)
•	Fixed length binary string.
•	LIMIT- upper limit max 255 Bytes of binary data.
•	Ex: - small images, BARCODES, PICTURE_CODES, QR_CODES, SIGNATURES, FINGERPRINTS, etc.
•	No default width, and width need to be specified.
•	Internally they are stored as character strings of 1's and 0's.
H.	Varbinary: - (0,1)
•	Variable length binary string.
•	LIMIT- upper limit max 65,535 Bytes of binary data i.e  64 kb – 1.
•	Ex: - EMOTICONS, SMILEYS, COMPANY_LOGO, etc.
•	No default width, and width need to be specified.
•	Internally they are stored as character strings of 1's and 0's

2. BLOB ->
•	FULLFORM - Binary Large Object
1.	Tinyblob: - 
•	LIMIT- upper limit max upto 255 bytes of binary data
2.	Blob: - 
•	LIMIT- upper limit max upto 65,535 bytes of binary data
3.	Mediumblob: - 
•	LIMIT- upper limit max upto 16,777,215 bytes of binary data
4.	Longblob: - 
•	LIMIT- upper limit max upto 4,294,967,295 bytes of binary data

*	all of the above are stored outside the row
*	all of the above are stored outside the table
*	MySQL maintains a LOCATOR from the table row to the the Blob data
*	used for columns that will be focused on storage and display purposes
*	not used for that columns that will be used for searching
*	e.g PHOTOGRAPHS, CHARTS, GRAPHS, MAPS, SOUND, MUSIC, VIDEOS, etc.
*	Blob is the multimedia datatype of MySQL
*	width does not have specified in all of the above datatypes


3. Integer types (Exact value): -
•	Signed or Unsigned (by default it is signed).
A.	Tinyint: - 
•	Tinyint uses space of 1 Byte.
•	It ranges from -128 to 127 and  0 to 255.
•	Ex: -  AGE int unsigned
B.	Smallint: - 
•	Smallint uses space of 2 Bytes.
C.	Mediumint: - 
•	Mediumint uses space of 3 Bytes.
D.	Int: - 
•	Int uses space of 4 Bytes.
E.	Bigint: - 
•	Bigint uses space of 8 Bytes.
============================================================================
4. Floating-Point Types (Approximate Value): -
A.	Float 
•	Float uses space upto 7 decimals.
B.	Double: - 
•	Double uses space upto 15 decimals.
===============================================================================

5. Fixed-point types (Exact value):-
Decimal: - 
•	stores double as a string. Ex: - "653.7"
•	maximum number of digits is 65.
•	Decimal is used when it is important to preserve the exact precision, for example with monetary data.
6. Boolean (logical datatypes): - 
•	logical datatypes.
•	Boolean returns True or False and evaluate  1 for True and 0 for False.
•	Ex: - MARITAL_STATUS Boolean and can insert true, false 1 or 0 and output will always be  displayed in 1 or 0.
=====================================================================================
7. Date & Time Datatypes: -
Default Date format Date: -
•	'YYYY-MM-DD’ - Example: - '2021-07-15' 
•	Date can range from '1000-01-01' to '9999-12-31' (specifying all 4 digits of year is optional)
•	year values in the range 70-99 are converted to 1970-1999
•	year values in the range 00-69 are converted to 2000-2069
•	date1 - date2 returns number of days between the 2 dates. 
•	Internally date is stored as a number and it occupies 7 Bytes of storage
•	e.g. '2021-07-15' - '2021-07-12' then number of days = 3
        ‘1000-01-01' -> 1
        '1000-01-02' -> 2
		'2021-07-15' -> 2147398 (number of days since '1000-01-01')

A.	Time ('HH:MM:SS') or ('HHH:MM:SS'); -
•	time values may range from '-838:59:59 to '838:59:59'
B.	Datetime ('YYYY-MM-DD and hh:mm:ss'): - 
•	'100-01-01 00:00:00' to '9999-12-31 23:59:59' range
C.	Year (YYYY): -
•	(1901-2155)


================================5.  16th July ============================= 

# How to create table in SQL:-  
create table emp
(
empno char(4),
ename varchar(25),
sal float,
city varchar(15),
dob date
);
	Hence Table created.  

	TO add Row we use insert command
insert into emp values('1', 'Amit', 5000, 'Mumbai', '1995-05-04');
insert into emp (empno, sal,ename, city, dob)  
values('2', 6000, 'Amit', 'Mumbai', '1995-05-04');       // this gives error so specify format like above line

insert into emp (empno, sal)
 values('3', 7000);                      // other value are NULL


	Semi-colon (;) is known as delimiter (it indicates end of command)

1.	INSERT: - 
After creating a Table if we want to add rows we use “insert command”.

•	use  '  '  -  for char, varchar, date, time, datetime 
•	command is case-sensitive
•	data is case-sensitive

Two ways to write INSERT COMMAND: - 
1. Short and Easy to write but not recommended
insert into emp values('1', 'Amit', 5000, 'Mumbai', '1995-05-04');
2.  Recommended to write this
insert into emp (empno, sal,ename, city, dob)
 values('2', 6000, 'Amit', 'Mumbai', '1995-05-04');
1. readable
2. flexible
3. in future if you alter the table, if you add a column, the second INSERT statement will continue to work 
•	IF we insert command and we don’t give values for some data then it by default gives NULL to that field.
Example: - 
                        insert into emp (empno, sal)
                        values('3', 7000);           
Here we can see we are only INSERTING two values but in table we have other fields as well so in that fields NULL will be stored as we aren’t giving values to it.

•	NULL
o	null means nothing
o	ASCII value  = 0 for NULL
o	Special treatment given to null value in all RDBMS
o	null value is independent of datatype
o	Storage – 1 Byte for NULL
o	Storage – 0 Byte for NULL -  if row is ending with NULL

•	INSERT MULTIPLE ROW  -  to insert multiple rows in a table simultaneously using a single INSERT statement: -
1.  
insert into emp values
('1', 'A', 5000, 'Mumbai', '1990-01-10),
('2', 'B', 7000, 'Mumbai', '1990-02-10),
('3', 'C', 3000, 'Mumbai', '1990-03-10),
('4', 'D', 8000, 'Mumbai', '1990-04-10);
2.
insert into emp(empno, sal) values
('1', 5000),
('2', 7000),
('3', 3000),
('4', 8000);

above INSERT statements will work in my SQL but will not work in my Oracle
=====================================================================================

2.	SELECT: - 
      Using SELECT Command, we can see all the ROWS and COLUMN of the table.
Example: -
1.	select * from emp;
2.	select * from dept;

steps of working select stmt(read, compile, plan, execute)

*	* means metacharacter (all columns)

# to restrict the colums:-

select empno, ename from emp;
select deptno, job, ename, sal, hiredata from emp;

*	position of columns in SELECT statement will determine the position of columns in
	output (you will write as per User requirements)

# to restrict rows:-

select * from emp
where deptno = 10;

*	WHERE clause is used for searching
*	searching takes place in DB server HD
*	WHERE clause is used to restrict the rows
*	WHERE clause is used to retrive the rows fromDB server HD to server RAM

select * from emp
where sal > 2000;

# Relational operator:-

1. >
2. >=
3. <
4. <=
5. !=    or   <>
6. =

select * from emp
where sal > 2000;

select * from emp
where sal > 2000 and sal < 3000;

Logical operator:-

1. NOT
2. AND
3. OR

select * from emp
where (deptno = 10 or sal > 2000) | and sal < 3000;

select * from emp
where sal > 2000 or sal < 3000;          //gets all rows useless statement

select * from emp
Where job = 'MANAGER';

In Oracle:- 
*	queries are case-sensitive
*	not user-friendly
*	more secure

In MySQL:- 
*	queries are case-insensitive
*	more user-friendly
*	less secure

select * from emp
Where job = 'MANAGER' or job = 'CLEARK';

select * from emp
Where job = 'MANAGER' and job = 'CLEARK';        //useless statement
--------
19-7-21
--------
select ename,sal from emp;

select ename, sal, sal*12 from emp;

sal*12 -> computed column, calculated column, derived column, fake column, pseudo column

select ename, sal, sal*12 from emp;

Aithmatic Operator:-
1. ( )       ->   (2 + 3) * 4
2.  **       ->   sal**3, sal**(1/3) 
3.  /        ->   ** does not work in SQL
4.  *        ->   ** works in Oracle PL/SQL   in SQL, if you want exponetitation, then you will have use the power function
5.  +
6.  -

select ename, sal, sal*12 as "ANNUAL" from emp;    ->  called as alias
as -> ANSI SQL  
      optional in MySQL and Oracle

select ename, sal, sal*12 "ANNUAL" from emp;

select ename "EMPNAME", sal "SALARY", sal*12 "ANNUAL", sal*12*0.4 "HRA", sal*12*0.2 "DA", sal*12 + sal*12*0.4 + sal*12*0.2 "NET EARNINGS" from emp;

select ename, sal, sal*12 "ANNUAL" from emp where annual < 300000;   -> ERROR we cannot use where clause in alias

*	you cannot use alias in the WHERE clause
*	Where clause is used for searching
*	searching tak place in DB server HD
*	at the time of searching in the DB server HD, the alias does not exist
*	the alias is generated afterwards by MySQL, after the rows have been brought into server RAM

select job from emp;

# to suppress duplicate :-
select distinct job from emp;

*	whenever you use DISTINCT, sorting take place internally

*	when you install mySQL, 2 user are automatically created
	1. root
		has DBA privileges
		create user, assign privileges, take backup of table data, performance monitoring, performance tuning, etc
	2. mysql.sys
		most important user in MySQL
		owner of MySQL database
		startup database, shutdown database, perform recovery, etc.

# To connect to MySQL database using MySQL Command Line Client
*	open MySQL command line Client

# to connect to MySQL databse using MySQL Workbench:-
open MySQL workbench
MySQL Connections (click on + sign to create a new connection)
connection name:- Connection for root user
connection method:- standard (TCP/IP)
Hostname:- machine name or IP address
port :- 3306
password (Store in vault ... bpush button)  ->  click on it and specify the password for root user -> click on OK
Default Schema:- leave it blank
*	SCHEMA is synonym for database
Test connection push button -> click on it -> click on ok -> click on ok

# To log in to MySQL database:-
Click on the connection you create

You will see Object NAvigator on LHS
You will see Query Window at the top
You will see Output Window below
You will see Pull down menu and a Horizontal toolbar at the left 

Some basic commands post login:-
show databases;
Ctrl+Enter -> to executes

to connect to a database:-
use <databasename>;

use mysql;

# to see which all user have been created:-
select * from user;
*	user is a MySQL created system table
*	total of 63 system tables in MySQL

show tables;
desc emp;

# To create a user and a default database for that user:-
 create database <databasename>;
or
create schema <schemaname>;

create database metiitmumbaiedacmay2021

create user<username> identified by <password>

create user edac1@'%' identified by 'welcome';

to grant permissions:-

Click on server (menu at the top) -> user and Privileges -> click on it

select the user name you created from the user account list on LHS

Go to Administrative Roles (tab)

Select DBA role and click on Apply (push button)

go to Schema Privileges tab

Add Entry ... (push button) -> Click on it

click on selected Schema
click on Poplist and select metiitmumbaiedacmay2021
click on ok (push button)
Select "ALL" push button -> click on it
Grant option (checkbox) -> click on it to check it -> click on apply

Exit from MySQL Workbench

Open MySQL Workbench and create new connection for user edac1 For user edac1:-
Default Schema:- metiitmumbaiedacmay2021
=================================================================================================
----------
20-07-2021
----------

select deptno, job, ename, sal, hiredate from emp;

*	in a file, data is stored sequentially; but table is not a file, every row is a file
*	rows of table are not stored sequentially
*	rows of a table are not stored in any particular order
*	rows of a table are scattered (fragmented) all over the DB server HD
*	the reason why MySQL does this is to speed up the INSERT statement
*	e.g in a multi-user environment, if multiple user are inserting rows in the same table simultaneously, 
	then wherever it finds the free space in DB server HD, it will store the rows there
*	when you SELECT from a table, the order of rows in the output depends on the row address (address of that the row
	in the DB server HD)
*	when you SELECT from a table. the order of rows in the output will always be in in ascending order of the rows
*	therfore it is not possible to see the first 'N' rows of a table or the last 'N' rows of table
*	even the address of the row is not fixed
*	when you UPDATE 
